//-----------------------------------------------------------------------------
//File SymbolTable.cpp implements member functions of class SymbolTable 
//-----------------------------------------------------------------------------
//Author: Thomas R. Turner
//E-Mail: trturner@ucok.edu
//January, 2009
//-----------------------------------------------------------------------------
//Copyright January, 2009 by Thomas R. Turner.
//Do not reproduce without permission from Thomas R. Turner.
//-----------------------------------------------------------------------------
//C++ include files and namespace std
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
using namespace std;
//-----------------------------------------------------------------------------
//Application include files
//-----------------------------------------------------------------------------
#include "List.h"
#include "Typ.h"
#include "Sym.h"
#include "Locality.h"
#include "LocalityStack.h"
#include "SymbolTable.h"
#include "Label.h"
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
SymbolTable::SymbolTable(){}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
SymbolTable::~SymbolTable(){}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void SymbolTable::Standard(void)
{   StandardTypes();
    StandardConstants();
    StandardProcedures();
    StandardFunctions();
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void SymbolTable::StandardTypes(void)
{       
    tvoid=new Void();

    tchar=new Character(1,1);
    string Char("char");
    Sym* schar=new TypeSymbol(Char,tchar,LexicalLevel());
    Insert(schar);

    tinteger=new Integer(1,1);
    string Integer("integer");
    Sym* sinteger=new TypeSymbol(Integer,tinteger,LexicalLevel());
    Insert(sinteger);

    treal=new Real(1,1);
    string Real("real");
    Sym* sreal=new TypeSymbol(Real,treal,LexicalLevel());
    Insert(sreal);
    
    tboolean=new Boolean(1,1);
    string Boolean("boolean");
    Sym* sboolean=new TypeSymbol(Boolean,tboolean,LexicalLevel());
    Insert(sboolean);

    taddress=new Address(1,1);
 
    tstandardprocedure=new StandardFunction(tk_standardprocedure);

    tstandardfunction=new StandardFunction(tk_standardfunction);
    
}
//-----------------------------------------------------------------------------
//Function StandardConstants initalizes standard constants.
//-----------------------------------------------------------------------------
void SymbolTable::StandardConstants(void)
{  Sym* sfalse=new ConstantSymbol("false",tboolean,"0",LexicalLevel());
   Insert(sfalse);
   Sym* strue= new ConstantSymbol("true" ,tboolean,"1",LexicalLevel());
   Insert(strue);
}
void SymbolTable::StandardProcedures(void)
{  Sym* wrb=new StandardFunctionSymbol
      ("writeboolean",TStandardProcedure(),"wrb");
   Insert(wrb);
   Sym* wrc=new StandardFunctionSymbol
      ("writechar",TStandardProcedure(),"wrc");
   Insert(wrc);
   Sym* wri=new StandardFunctionSymbol
      ("writeinteger",TStandardProcedure(),"wri");
   Insert(wri);
   Sym* wre=new StandardFunctionSymbol
      ("writeexponential",TStandardProcedure(),"wre");
   Insert(wre);
   Sym* wrf=new StandardFunctionSymbol
      ("writefixed",TStandardProcedure(),"wrf");
   Insert(wrf);
   Sym* wln=new StandardFunctionSymbol
      ("writeln",TStandardProcedure(),"wln");
   Insert(wln);
}
void SymbolTable::StandardFunctions(void)
{  Sym* abs=new StandardFunctionSymbol
      ("abs",TStandardFunction(),"abs");
   Insert(abs  );
   Sym* sqrt=new StandardFunctionSymbol
      ("sqrt",TStandardFunction(),"sqt");
   Insert(sqrt);
   Sym* trunc=new StandardFunctionSymbol
      ("trunc",TStandardFunction(),"trc");
   Insert(trunc);
   Sym* round=new StandardFunctionSymbol
      ("round",TStandardFunction(),"rnd");
   Insert(round);
   Sym* ord  =new StandardFunctionSymbol
      ("ord"  ,TStandardFunction(),"ord"  );
   Insert(ord  );
   Sym* chr  =new StandardFunctionSymbol
      ("chr"  ,TStandardFunction(),"chr"  );
   Insert(chr  );
   Sym* succ =new StandardFunctionSymbol
      ("succ" ,TStandardFunction(),"inc"  );
   Insert(succ );
   Sym* pred =new StandardFunctionSymbol
      ("pred" ,TStandardFunction(),"dec"  );
   Insert(pred );
}
//-----------------------------------------------------------------------------
//Print the symbols in the Symbol Table stored at the current lexical level
//-----------------------------------------------------------------------------
void SymbolTable::Print(ostream& o)
{   if (L) L->Print(o,LexicalLevel());
}
//-----------------------------------------------------------------------------
//Function NewLocality creates a new locality and pushes it on the stack.
//-----------------------------------------------------------------------------
void SymbolTable::NewLocality(string id)
{   L=new Locality(id);                 //Create a new locality 
    Push(L);                            //Push the locality on the 
                                        //LocalityStack
}
//-----------------------------------------------------------------------------
//Function PopLocality pops the locality from the top of the LocalityStack
//-----------------------------------------------------------------------------
void SymbolTable::PopLocality(void)
{  
   L=Pop();                             //Pop the current Locality from
                                        //the LocalityStack
   L=Top();                             //Make L the top of the locality stack
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TVoid(void){return tvoid;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TChar(void){return tchar;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TInteger(void){return tinteger;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TReal(void){return treal;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TBoolean(void){return tboolean;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TAddress(void){return taddress;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TStandardProcedure(void){return tstandardprocedure;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Typ* SymbolTable::TStandardFunction(void){return tstandardfunction;}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
Sym* SymbolTable::NewVariableSymbol(string id,Typ* T)
{   Sym* V=new VariableSymbol      //Create a new variable symbol descriptor
                (id                //Variable name
                ,T                 //Variable type
                ,Offset            //Variable address relative to frame
                     (T->Size()
                     ,T->Alignment()
                     )
                ,LexicalLevel()    //Lexical level of the variable
                );
     Insert(V);
     return V;
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
FunctionSymbol* SymbolTable::NewProgramSymbol(string id)
{  Function* T=new Function(tk_program);
   FunctionSymbol* P=new FunctionSymbol
       (id
       ,T
       ,LexicalLevel()
       );
   Insert(P);
   return P;
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
FunctionSymbol* SymbolTable::NewFunctionSymbol(string id,Typ* RT)
{  Function* T=new Function(tk_function);
   FunctionSymbol* F=new FunctionSymbol
       (id
       ,T
       ,LexicalLevel()
       );
   T->StoreReturnType(RT);
   Insert(F);
   return F;
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
FunctionSymbol* SymbolTable::NewProcedureSymbol(string id)
{  Function* T=new Function(tk_procedure);
   FunctionSymbol* P=new FunctionSymbol
       (id
       ,T
       ,LexicalLevel()
       );
   T->StoreReturnType(TVoid());
   Insert(P);
   return P;
}
