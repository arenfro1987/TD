#ifndef Typ_h 
#define Typ_h 1
//-----------------------------------------------------------------------------
//File Typ.h defines the attributes of Types for the Subset Pascal
//symbol table 
//-----------------------------------------------------------------------------
//Author: Thomas R. Turner
//E-Mail: trturner@ucok.edu
//January, 2009
//-----------------------------------------------------------------------------
//Copyright January, 2009 by Thomas R. Turner.
//Do not reproduce without permission from Thomas R. Turner.
//-----------------------------------------------------------------------------
//C++ include files and namespace std
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
using namespace std;
//-----------------------------------------------------------------------------
//Application include files
//-----------------------------------------------------------------------------
#include "List.h"
//-----------------------------------------------------------------------------
//Forward declarations
//-----------------------------------------------------------------------------
class ConstantSymbol;
class Sym;
//-----------------------------------------------------------------------------
//Type classification - kinds of types
//-----------------------------------------------------------------------------
enum TypeKind
  {tk_void                    //Type void
  ,tk_address                 //Type address
  ,tk_boolean                 //Type Boolean
  ,tk_character               //Type character
  ,tk_integer                 //Type integer
  ,tk_real                    //Type real
  ,tk_array                   //Type array
  ,tk_range                   //Type range
  ,tk_enumerated              //Type enumerated
  ,tk_program                 //Type program
  ,tk_procedure               //Type procedure
  ,tk_function                //Type function
  ,tk_standardprocedure       //Type standardprocedure
  ,tk_standardfunction        //Type standardfunction
  };
//-----------------------------------------------------------------------------
//Define the attributes base class Typ
//-----------------------------------------------------------------------------
class Typ {
    TypeKind typekind;        //Type classification
    int size;                 //Number of bits required to store an entity of
                              //this type
    int alignment;            //Alignment specification for this type
public:
    //-------------------------------------------------------------------------
    //A constructor for the base type
    //-------------------------------------------------------------------------
    Typ(TypeKind tk,int sz,int al);
    //-------------------------------------------------------------------------
    //Function Print depends on the class being printed.
    //-------------------------------------------------------------------------
    virtual void Print(ostream& o,int level,char* title);
    //-------------------------------------------------------------------------
    //Function Elements returns the number of elements in the type
    //-------------------------------------------------------------------------
    virtual int Elements(void);
    TypeKind Typekind(void);  //Returns type classification
    bool IsVoidType(void);    //Returns true if tk_void
    bool IsAddressType(void); //Returns true if tk_address
    bool IsBooleanType(void); //Returns true if tk_boolean
                              //Returns true if tk_character
    bool IsCharacterType(void);
    bool IsIntegerType(void); //Returns true if tk_integer
    bool IsRealType(void);    //Returns true if tk_real
    bool IsArrayType(void);   //Returns true if tk_array
    bool IsRangeType(void);   //Returns true if tk_range
                              //Returns true if tk_enumerated
    bool IsEnumeratedType(void);
    bool IsProgramType(void); //Returns true if tk_program
                              //Returns true if tk_procedure
    bool IsProcedureType(void);
    bool IsFunctionType(void);//Returns true if tk_function
                              //Returns true if tk_standardprocedure
    bool IsStandardProcedureType(void);
                              //Returns true if tk_standardfunction
    bool IsStandardFunctionType(void);
    string TypeChar(void);    //Returns the P-Code type-character
    int Size(void);           //Returns the number of bits occupied by an 
                              //entity of this type
    void SetSize(int sz);     //Assigns the size for this type
    int Alignment(void);      //Returns the alignment specification for this
                              //type
    void SetAlignment(int al);//Assigns the alignment specification for this
                              //Type
};
//-----------------------------------------------------------------------------
//Defines derived type Void
//-----------------------------------------------------------------------------
class Void: public Typ {
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Void
    //-------------------------------------------------------------------------
    Void(void);
};
//-----------------------------------------------------------------------------
//Defines derived type Address 
//-----------------------------------------------------------------------------
class Address: public Typ {
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Void
    //-------------------------------------------------------------------------
    Address(int sz, int al);
};
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//Defines derived type Boolean 
//-----------------------------------------------------------------------------
class Boolean: public Typ {
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Integer
    //-------------------------------------------------------------------------
    Boolean(int sz,int al);
};
//-----------------------------------------------------------------------------
//Defines derived type Integer
//-----------------------------------------------------------------------------
class Integer: public Typ {
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Integer
    //-------------------------------------------------------------------------
    Integer(int sz,int al);
};
//-----------------------------------------------------------------------------
//Defines derived type Real
//-----------------------------------------------------------------------------
class Real: public Typ {
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Real
    //-------------------------------------------------------------------------
    Real(int sz,int al);
};
//-----------------------------------------------------------------------------
//Defines derived type Character
//-----------------------------------------------------------------------------
class Character: public Typ {
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Character
    //-------------------------------------------------------------------------
    Character(int sz,int al);
};
//-----------------------------------------------------------------------------
//Defines derived type Range.
//A range is a sequence of ordinal values.  Ordinal values can have type
//Cardinal, Character, Enumerated, Integer, and Range.
//Ranges are defined by lower and upper bounds of type ConstantSymbol.
//-----------------------------------------------------------------------------
class Range: public Typ {
    ConstantSymbol* lo;
    ConstantSymbol* hi;
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Range
    //-------------------------------------------------------------------------
    Range(ConstantSymbol* l,ConstantSymbol* h);
    //-------------------------------------------------------------------------
    //Function Print prints a Range type and its subordinate constant symbols
    //-------------------------------------------------------------------------
    void Print(ostream& o,int level,char* title);
    //-------------------------------------------------------------------------
    //Function LoBound returns the value of the lower bound
    //-------------------------------------------------------------------------
    string LoBound(void);
    //-------------------------------------------------------------------------
    //Function HiBound returns the value of the upper bound
    //-------------------------------------------------------------------------
    string HiBound(void);
    //-------------------------------------------------------------------------
    //Function Count returns HiBound-LoBound+1
    //-------------------------------------------------------------------------
    int Count(void);
};
//-----------------------------------------------------------------------------
//Defines derived type Array.
//Type Array is composed of two subordinate types
//1.  An index type that must have a range of ordinal values
//2.  An element type that is not constrained
//-----------------------------------------------------------------------------
class Array: public Typ {
   Typ* ityp;       //Index type
   Typ* etyp;       //Element type
public:
    //-------------------------------------------------------------------------
    //A constructor for derived type Array
    //-------------------------------------------------------------------------
    Array(Typ* i,Typ* e);
    //-------------------------------------------------------------------------
    //Function Print prints the array type and its two subordinate types
    //-------------------------------------------------------------------------
    void Print(ostream& o,int level,char* title);
    //-------------------------------------------------------------------------
    //Function IndexType returns the index type of the array
    //-------------------------------------------------------------------------
    Typ* IndexType(void);
    //-------------------------------------------------------------------------
    //Function ElementType returns the element type of the array
    //-------------------------------------------------------------------------
    Typ* ElementType(void);
    //-------------------------------------------------------------------------
    //Function Stride returns the amount of memory occupied by an element
    //of this array.
    //-------------------------------------------------------------------------
    int Stride(void);
};
//-----------------------------------------------------------------------------
//Defines derived type Enumerated.
//An enumerated type is a list of constant symbols.  Each constant symbol
//is an enumeration constant
//-----------------------------------------------------------------------------
class Enumerated: public Typ {
   List<ConstantSymbol*>* L;
public:
   //-------------------------------------------------------------------------
   //A constructor for derived type enumerated.
   //Each string in List L is an enumerated constant whose value is
   //equal to its index in the list.
   //Enumeration constants are defined to have a base type of Integer.
   //-------------------------------------------------------------------------
   Enumerated(List<string>& L,int ll);
   //-------------------------------------------------------------------------
   //A constructor for derived type enumerated.  
   //The size and the alignment specification for the underlying Integer
   //type are given.
   //-------------------------------------------------------------------------
   Enumerated(List<string>& L,int sz,int al,int ll);
   //-------------------------------------------------------------------------
   //Function Print prints the enumerated type and all the enumeration
   //constants.
   //-------------------------------------------------------------------------
   void Print(ostream& o,int level,char* title);
   //-------------------------------------------------------------------------
   //Function Elements returns the number of enumeration constants defined
   //by this enumerated type.
   //-------------------------------------------------------------------------
   int Elements(void);
};
//-----------------------------------------------------------------------------
//Defines type Function used to describe programs, functions, and procedures
//-----------------------------------------------------------------------------
class Function: public Typ {
   Typ* rt;                   //Points to the return type
   List<Sym*>* P;             //Points to a list of parameters
public:
   //-------------------------------------------------------------------------
   //List L points to a list of Symbol Descriptors.  Each symbol descriptor
   //specifies a parameter.  The first element of the list specifies the return
   //type.  
   //-------------------------------------------------------------------------
   Function(TypeKind typkind);
   //-------------------------------------------------------------------------
   //Add parameters to the function
   //-------------------------------------------------------------------------
   void StoreParameters(List<Sym*>* p);
   //-------------------------------------------------------------------------
   //Add return type to a function 
   //-------------------------------------------------------------------------
   void StoreReturnType(Typ* T);
   //-------------------------------------------------------------------------
   //Return the function type 
   //-------------------------------------------------------------------------
   Typ* ReturnType(void);
   //-------------------------------------------------------------------------
   //Function ParameterCount returns the number of Parameters
   //-------------------------------------------------------------------------
   int ParameterCount(void);
   //-------------------------------------------------------------------------
   //Function Print prints the function, its return type, and its 
   //parameters. 
   //-------------------------------------------------------------------------
   void Print(ostream& o,int level,char* title);
};
class StandardFunction: public Typ {
public:
   StandardFunction(TypeKind typekind);
   void Print(ostream& o,int level,char* title);
};
#endif
