
Token:Code=294 Name=   PROGRAM line= 12 col=  1 Spelling="program"
Token:Code=301 Name=        ID line= 12 col=  9 Spelling="p029_000"
Token:Code=266 Name= SEMICOLON line= 12 col= 17 Spelling=";"
#005 program_parameters -> empty
#002 program_head -> PROGRAM ID(p029_000) program_parameters ;
#010 declarations -> empty
Token:Code=287 Name=  FUNCTION line= 13 col=  3 Spelling="function"
#015 subprogram_declarations -> empty
Token:Code=301 Name=        ID line= 13 col= 12 Spelling="max"
Token:Code=274 Name=    LPAREN line= 13 col= 15 Spelling="("
Token:Code=301 Name=        ID line= 13 col= 16 Spelling="a"
#008 identifier_list -> ID(a) identifier_list={a}
Token:Code=265 Name=     COMMA line= 13 col= 17 Spelling=","
Token:Code=301 Name=        ID line= 13 col= 18 Spelling="b"
#009 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token:Code=267 Name=     COLON line= 13 col= 19 Spelling=":"
Token:Code=301 Name=        ID line= 13 col= 20 Spelling="integer"
#014 standard_type -> ID(integer)
#012 type -> standard_type
#022 parameter_list -> identifier_list : type
Token:Code=275 Name=    RPAREN line= 13 col= 27 Spelling=")"
#021 subprogram_parameters -> ( parameter_list )
Token:Code=267 Name=     COLON line= 13 col= 28 Spelling=":"
Token:Code=301 Name=        ID line= 13 col= 29 Spelling="integer"
#014 standard_type -> ID(integer)
Token:Code=266 Name= SEMICOLON line= 13 col= 36 Spelling=";"
#018 subprogram_head -> FUNCTION ID(max) subprogram_parameters : standard_type ;
#010 declarations -> empty
Token:Code=282 Name=     BEGIN line= 14 col=  3 Spelling="begin"
Token:Code=288 Name=        IF line= 15 col=  5 Spelling="if"
Token:Code=301 Name=        ID line= 15 col=  8 Spelling="a"
Token:Code=273 Name=       GRT line= 15 col=  9 Spelling=">"
#063 factor -> ID(a)
#056 term -> factor
#048 simple_expression -> term
#046 relop -> >
Token:Code=301 Name=        ID line= 15 col= 10 Spelling="b"
Token:Code=295 Name=      THEN line= 15 col= 12 Spelling="then"
#063 factor -> ID(b)
#056 term -> factor
#048 simple_expression -> term
#041 expression -> simple_expression relop simple_expression
Token:Code=301 Name=        ID line= 15 col= 17 Spelling="max"
Token:Code=263 Name=    ASSIGN line= 15 col= 20 Spelling=":="
#034 variable -> ID(max)
Token:Code=301 Name=        ID line= 15 col= 22 Spelling="a"
Token:Code=285 Name=      ELSE line= 15 col= 24 Spelling="else"
#063 factor -> ID(a)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
Token:Code=301 Name=        ID line= 15 col= 29 Spelling="max"
Token:Code=263 Name=    ASSIGN line= 15 col= 32 Spelling=":="
#034 variable -> ID(max)
Token:Code=301 Name=        ID line= 15 col= 34 Spelling="b"
Token:Code=286 Name=       END line= 16 col=  3 Spelling="end"
#063 factor -> ID(b)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#032 statement -> IF expression THEN statement ELSE statement 
#027 statement_list -> statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
#017 subprogram_declaration -> subprogram_head declarations compound_statement
Token:Code=266 Name= SEMICOLON line= 16 col= 11 Spelling=";"
#016 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token:Code=293 Name= PROCEDURE line= 17 col=  3 Spelling="procedure"
Token:Code=301 Name=        ID line= 17 col= 13 Spelling="print"
Token:Code=274 Name=    LPAREN line= 17 col= 18 Spelling="("
Token:Code=301 Name=        ID line= 17 col= 19 Spelling="a"
#008 identifier_list -> ID(a) identifier_list={a}
Token:Code=267 Name=     COLON line= 17 col= 20 Spelling=":"
Token:Code=301 Name=        ID line= 17 col= 21 Spelling="integer"
#014 standard_type -> ID(integer)
#012 type -> standard_type
#022 parameter_list -> identifier_list : type
Token:Code=266 Name= SEMICOLON line= 17 col= 28 Spelling=";"
Token:Code=301 Name=        ID line= 17 col= 29 Spelling="b"
#008 identifier_list -> ID(b) identifier_list={b}
Token:Code=267 Name=     COLON line= 17 col= 30 Spelling=":"
Token:Code=301 Name=        ID line= 17 col= 31 Spelling="integer"
#014 standard_type -> ID(integer)
#012 type -> standard_type
#023 parameter_list -> parameter_list ; identifier_list : type
Token:Code=275 Name=    RPAREN line= 17 col= 38 Spelling=")"
#021 subprogram_parameters -> ( parameter_list )
Token:Code=266 Name= SEMICOLON line= 17 col= 39 Spelling=";"
#019 subprogram_head -> PROCDURE ID(print) subprogram_parameters ;
#010 declarations -> empty
Token:Code=282 Name=     BEGIN line= 18 col=  3 Spelling="begin"
Token:Code=301 Name=        ID line= 19 col=  5 Spelling="write"
Token:Code=274 Name=    LPAREN line= 19 col= 10 Spelling="("
Token:Code=304 Name=    CHRLIT line= 19 col= 11 Spelling="'The maximum of '"
#070 factor -> CHRLIT('The maximum of ')
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 19 col= 28 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#027 statement_list -> statement
Token:Code=266 Name= SEMICOLON line= 19 col= 29 Spelling=";"
Token:Code=301 Name=        ID line= 20 col=  5 Spelling="write"
Token:Code=274 Name=    LPAREN line= 20 col= 10 Spelling="("
Token:Code=301 Name=        ID line= 20 col= 11 Spelling="a"
Token:Code=275 Name=    RPAREN line= 20 col= 12 Spelling=")"
#063 factor -> ID(a)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 20 col= 13 Spelling=";"
Token:Code=301 Name=        ID line= 21 col=  5 Spelling="write"
Token:Code=274 Name=    LPAREN line= 21 col= 10 Spelling="("
Token:Code=304 Name=    CHRLIT line= 21 col= 11 Spelling="' and '"
#070 factor -> CHRLIT(' and ')
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 21 col= 18 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 21 col= 19 Spelling=";"
Token:Code=301 Name=        ID line= 22 col=  5 Spelling="write"
Token:Code=274 Name=    LPAREN line= 22 col= 10 Spelling="("
Token:Code=301 Name=        ID line= 22 col= 11 Spelling="b"
Token:Code=275 Name=    RPAREN line= 22 col= 12 Spelling=")"
#063 factor -> ID(b)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 22 col= 13 Spelling=";"
Token:Code=301 Name=        ID line= 23 col=  5 Spelling="write"
Token:Code=274 Name=    LPAREN line= 23 col= 10 Spelling="("
Token:Code=304 Name=    CHRLIT line= 23 col= 11 Spelling="' is '"
#070 factor -> CHRLIT(' is ')
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 23 col= 17 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 23 col= 18 Spelling=";"
Token:Code=301 Name=        ID line= 24 col=  5 Spelling="write"
Token:Code=274 Name=    LPAREN line= 24 col= 10 Spelling="("
Token:Code=301 Name=        ID line= 24 col= 11 Spelling="max"
Token:Code=274 Name=    LPAREN line= 24 col= 14 Spelling="("
Token:Code=301 Name=        ID line= 24 col= 15 Spelling="a"
Token:Code=265 Name=     COMMA line= 24 col= 16 Spelling=","
#063 factor -> ID(a)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
Token:Code=301 Name=        ID line= 24 col= 17 Spelling="b"
Token:Code=275 Name=    RPAREN line= 24 col= 18 Spelling=")"
#063 factor -> ID(b)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#039 expression_list -> expression_list , expression
#065 factor -> ID(max) ( expression_list )
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 24 col= 19 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 24 col= 20 Spelling=";"
Token:Code=301 Name=        ID line= 25 col=  5 Spelling="writeln"
Token:Code=286 Name=       END line= 26 col=  3 Spelling="end"
#036 procedure_statement -> ID(writeln)
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
#017 subprogram_declaration -> subprogram_head declarations compound_statement
Token:Code=266 Name= SEMICOLON line= 26 col= 13 Spelling=";"
#016 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token:Code=282 Name=     BEGIN line= 27 col=  1 Spelling="begin"
#003 program_declarations -> declarations subprogram_declarations
Token:Code=301 Name=        ID line= 28 col=  3 Spelling="print"
Token:Code=274 Name=    LPAREN line= 28 col=  8 Spelling="("
Token:Code=302 Name=    INTLIT line= 28 col=  9 Spelling="2"
#068 factor -> INTLIT(2)
#056 term -> factor
Token:Code=265 Name=     COMMA line= 28 col= 10 Spelling=","
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
Token:Code=302 Name=    INTLIT line= 28 col= 11 Spelling="3"
#068 factor -> INTLIT(3)
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 28 col= 12 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#039 expression_list -> expression_list , expression
#037 procedure_statement -> ID(print) ( expression_list )
#030 statement -> procedure_statement
#027 statement_list -> statement
Token:Code=286 Name=       END line= 29 col=  1 Spelling="end"
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
Token:Code=264 Name=    PERIOD line= 29 col= 14 Spelling="."
#004 program_body -> compound_statement .
#001 program -> program_head program_declarations program_body
