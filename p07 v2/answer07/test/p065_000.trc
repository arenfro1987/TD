
Token:Code=294 Name=   PROGRAM line= 12 col=  1 Spelling="program"
Token:Code=301 Name=        ID line= 12 col=  9 Spelling="p065_000"
Token:Code=266 Name= SEMICOLON line= 12 col= 17 Spelling=";"
#005 program_parameters -> empty
#002 program_head -> PROGRAM ID(p065_000) program_parameters ;
Before::LexicalLevel=0 After::LexicalLevel=1

#010 variable_declarations -> empty
Token:Code=298 Name=       VAR line= 13 col=  3 Spelling="var"
Token:Code=301 Name=        ID line= 13 col=  7 Spelling="i"
#008 identifier_list -> ID(i) identifier_list={i}
Token:Code=267 Name=     COLON line= 13 col=  8 Spelling=":"
Token:Code=301 Name=        ID line= 13 col=  9 Spelling="integer"
#014 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#012 type -> standard_type
Token:Code=266 Name= SEMICOLON line= 13 col= 16 Spelling=";"
#011 variable_declarations -> variable_declarations VAR identifier_list:type;
Token:Code=287 Name=  FUNCTION line= 14 col=  3 Spelling="function"
#015 subprogram_declarations -> empty
Token:Code=301 Name=        ID line= 14 col= 12 Spelling="max"
Token:Code=274 Name=    LPAREN line= 14 col= 15 Spelling="("
Token:Code=301 Name=        ID line= 14 col= 16 Spelling="a"
#008 identifier_list -> ID(a) identifier_list={a}
Token:Code=265 Name=     COMMA line= 14 col= 17 Spelling=","
Token:Code=301 Name=        ID line= 14 col= 18 Spelling="b"
#009 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token:Code=267 Name=     COLON line= 14 col= 19 Spelling=":"
Token:Code=301 Name=        ID line= 14 col= 20 Spelling="integer"
#014 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#012 type -> standard_type
#022 parameter_list -> identifier_list : type
Token:Code=275 Name=    RPAREN line= 14 col= 27 Spelling=")"
#021 subprogram_parameters -> ( parameter_list )
Token:Code=267 Name=     COLON line= 14 col= 28 Spelling=":"
Token:Code=301 Name=        ID line= 14 col= 29 Spelling="integer"
#014 standard_type -> ID(integer)
Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
Token:Code=266 Name= SEMICOLON line= 14 col= 36 Spelling=";"
#018 subprogram_head -> FUNCTION ID(max) subprogram_parameters : standard_type ;
#010 variable_declarations -> empty
Token:Code=282 Name=     BEGIN line= 15 col=  3 Spelling="begin"
Token:Code=288 Name=        IF line= 16 col=  5 Spelling="if"
Token:Code=301 Name=        ID line= 16 col=  8 Spelling="a"
Token:Code=273 Name=       GRT line= 16 col=  9 Spelling=">"
#063 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         5         
#056 term -> factor
#048 simple_expression -> term
#046 relop -> >
Token:Code=301 Name=ID         line=16  col=10  Spelling="b"
Token:Code=295 Name=THEN       line=16  col=12  Spelling="then"
#063 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvi       0         6         
#056 term -> factor
#048 simple_expression -> term
#041 expression -> simple_expression relop simple_expression
Token:Code=301 Name=ID         line=16  col=17  Spelling="max"
Token:Code=263 Name=ASSIGN     line=16  col=20  Spelling=":="
#034 variable -> ID(max)
Token:Code=301 Name=ID         line=16  col=22  Spelling="a"
Token:Code=285 Name=ELSE       line=16  col=24  Spelling="else"
#063 factor -> ID(a)
Symbol(Variable Symbol) id(a)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(5)
          lvi       0         5         
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
Token:Code=301 Name=ID         line=16  col=29  Spelling="max"
Token:Code=263 Name=ASSIGN     line=16  col=32  Spelling=":="
#034 variable -> ID(max)
Token:Code=301 Name=ID         line=16  col=34  Spelling="b"
Token:Code=286 Name=END        line=17  col=3   Spelling="end"
#063 factor -> ID(b)
Symbol(Variable Symbol) id(b)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(2) address(6)
          lvi       0         6         
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#032 statement -> IF expression THEN statement ELSE statement 
#027 statement_list -> statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
#017 subprogram_declaration -> subprogram_head variable_declarations compound_statement
Locality: lexical level 2


  Symbol(Variable Symbol) id(a)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(2) address(5)
  Symbol(Variable Symbol) id(b)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(2) address(6)

Token:Code=266 Name=SEMICOLON  line=17  col=11  Spelling=";"
#016 subprogram_declarations -> subprogram_declarations subprogram_declaration ;
Token:Code=282 Name=BEGIN      line=18  col=1   Spelling="begin"
#003 program_declarations -> variable_declarations subprogram_declarations
Token:Code=301 Name=ID         line=19  col=3   Spelling="i"
Token:Code=263 Name=ASSIGN     line=19  col=4   Spelling=":="
#034 variable -> ID(i)
Token:Code=301 Name=ID         line=19  col=6   Spelling="max"
Token:Code=274 Name=LPAREN     line=19  col=9   Spelling="("
Token:Code=302 Name=INTLIT     line=19  col=10  Spelling="3"
#068 factor -> INTLIT(3)
          ldc       i         3         
#056 term -> factor
Token:Code=265 Name=COMMA      line=19  col=11  Spelling=","
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
Token:Code=302 Name=INTLIT     line=19  col=12  Spelling="4"
#068 factor -> INTLIT(4)
          ldc       i         4         
#056 term -> factor
Token:Code=275 Name=RPAREN     line=19  col=13  Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#039 expression_list -> expression_list , expression
#065 factor -> ID(max) ( expression_list )
          mst       0                   
          cup       2         L00004    
#056 term -> factor
Token:Code=286 Name=END        line=20  col=1   Spelling="end"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#027 statement_list -> statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
Token:Code=264 Name=PERIOD     line=20  col=14  Spelling="."
#004 program_body -> compound_statement .
#001 program -> program_head program_declarations program_body
Before::LexicalLevel=1
Locality: lexical level 1


  Symbol(Variable Symbol) id(i)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Function Symbol) id(max)
    type(Subprogram)
        Return Type
          type(Integer)
            size(1) alignment(1)
        Parameter Types
          type(Integer)
            size(1) alignment(1)
          type(Integer)
            size(1) alignment(1)
    lexicallevel(1) elabel(L00004) splabel(L00005) eplabel(L00006)
 After::LexicalLevel=0

Locality: lexical level 0


