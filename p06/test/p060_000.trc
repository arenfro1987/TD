Token:Code=293 Name=  PROGRAM Line=  12 Col=   1 Spelling= "program"
Token:Code=260 Name=       ID Line=  12 Col=   9 Spelling= "p060_000"
Token:Code=268 Name= SEMICOLON Line=  12 Col=  17 Spelling= ";"
#005 program_parameters -> empty
#002 program_head -> PROGRAM ID(p060_000) program_parameters ;
#010 variable_declarations -> empty
Token:Code=297 Name=      VAR Line=  13 Col=   3 Spelling= "var"
Token:Code=260 Name=       ID Line=  13 Col=   7 Spelling= "i"
#008 identifier_list -> ID(i)
 identifier_list={i}Token:Code=267 Name=    COMMA Line=  13 Col=   8 Spelling= ","
Token:Code=260 Name=       ID Line=  13 Col=   9 Spelling= "j"
#009 identifier_list -> identifier_list , ID(j)
 identifier_list={i,j}Token:Code=267 Name=    COMMA Line=  13 Col=  10 Spelling= ","
Token:Code=260 Name=       ID Line=  13 Col=  11 Spelling= "k"
#009 identifier_list -> identifier_list , ID(k)
 identifier_list={i,j,k}Token:Code=269 Name=    COLON Line=  13 Col=  12 Spelling= ":"
Token:Code=260 Name=       ID Line=  13 Col=  13 Spelling= "integer"
#014 standard_type -> ID(integer)

Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#012 type -> standard_type
Token:Code=268 Name= SEMICOLON Line=  13 Col=  20 Spelling= ";"
#011 variable_declarations -> variable_declarations VAR identifier_list:type;
Token:Code=297 Name=      VAR Line=  14 Col=   3 Spelling= "var"
Token:Code=260 Name=       ID Line=  14 Col=   7 Spelling= "r"
#008 identifier_list -> ID(r)
 identifier_list={r}Token:Code=267 Name=    COMMA Line=  14 Col=   8 Spelling= ","
Token:Code=260 Name=       ID Line=  14 Col=   9 Spelling= "s"
#009 identifier_list -> identifier_list , ID(s)
 identifier_list={r,s}Token:Code=267 Name=    COMMA Line=  14 Col=  10 Spelling= ","
Token:Code=260 Name=       ID Line=  14 Col=  11 Spelling= "t"
#009 identifier_list -> identifier_list , ID(t)
 identifier_list={r,s,t}Token:Code=269 Name=    COLON Line=  14 Col=  12 Spelling= ":"
Token:Code=260 Name=       ID Line=  14 Col=  13 Spelling= "real"
#014 standard_type -> ID(real)

Symbol(Type Symbol) id(real)
  type(Real)
    size(1) alignment(1)
#012 type -> standard_type
Token:Code=268 Name= SEMICOLON Line=  14 Col=  17 Spelling= ";"
#011 variable_declarations -> variable_declarations VAR identifier_list:type;
Token:Code=297 Name=      VAR Line=  15 Col=   3 Spelling= "var"
Token:Code=260 Name=       ID Line=  15 Col=   7 Spelling= "b"
#008 identifier_list -> ID(b)
 identifier_list={b}Token:Code=267 Name=    COMMA Line=  15 Col=   8 Spelling= ","
Token:Code=260 Name=       ID Line=  15 Col=   9 Spelling= "c"
#009 identifier_list -> identifier_list , ID(c)
 identifier_list={b,c}Token:Code=267 Name=    COMMA Line=  15 Col=  10 Spelling= ","
Token:Code=260 Name=       ID Line=  15 Col=  11 Spelling= "d"
#009 identifier_list -> identifier_list , ID(d)
 identifier_list={b,c,d}Token:Code=269 Name=    COLON Line=  15 Col=  12 Spelling= ":"
Token:Code=260 Name=       ID Line=  15 Col=  13 Spelling= "boolean"
#014 standard_type -> ID(boolean)

Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
#012 type -> standard_type
Token:Code=268 Name= SEMICOLON Line=  15 Col=  20 Spelling= ";"
#011 variable_declarations -> variable_declarations VAR identifier_list:type;
Token:Code=258 Name=    BEGIN Line=  16 Col=   1 Spelling= "begin"
#015 subprogram_declarations -> empty
#003 program_declarations -> variable_declarations subprogram_declarations
Token:Code=260 Name=       ID Line=  17 Col=   3 Spelling= "b"
Token:Code=265 Name=   ASSIGN Line=  17 Col=   4 Spelling= ":="
#034 variable -> ID(b)
Token:Code=260 Name=       ID Line=  17 Col=   6 Spelling= "true"
Token:Code=268 Name= SEMICOLON Line=  17 Col=  10 Spelling= ";"
#063 factor -> ID(true)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#027 statement_list -> statement
Token:Code=260 Name=       ID Line=  17 Col=  11 Spelling= "c"
Token:Code=265 Name=   ASSIGN Line=  17 Col=  12 Spelling= ":="
#034 variable -> ID(c)
Token:Code=260 Name=       ID Line=  17 Col=  14 Spelling= "true"
Token:Code=268 Name= SEMICOLON Line=  17 Col=  18 Spelling= ";"
#063 factor -> ID(true)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  17 Col=  19 Spelling= "d"
Token:Code=265 Name=   ASSIGN Line=  17 Col=  20 Spelling= ":="
#034 variable -> ID(d)
Token:Code=260 Name=       ID Line=  17 Col=  22 Spelling= "true"
Token:Code=268 Name= SEMICOLON Line=  17 Col=  26 Spelling= ";"
#063 factor -> ID(true)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  18 Col=   3 Spelling= "i"
Token:Code=265 Name=   ASSIGN Line=  18 Col=   4 Spelling= ":="
#034 variable -> ID(i)
Token:Code=301 Name=   INTLIT Line=  18 Col=   6 Spelling= "1"
#068 factor -> INTLIT(1)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  18 Col=   7 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  18 Col=   8 Spelling= "j"
Token:Code=265 Name=   ASSIGN Line=  18 Col=   9 Spelling= ":="
#034 variable -> ID(j)
Token:Code=301 Name=   INTLIT Line=  18 Col=  11 Spelling= "2"
#068 factor -> INTLIT(2)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  18 Col=  12 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  18 Col=  13 Spelling= "k"
Token:Code=265 Name=   ASSIGN Line=  18 Col=  14 Spelling= ":="
#034 variable -> ID(k)
Token:Code=301 Name=   INTLIT Line=  18 Col=  16 Spelling= "3"
#068 factor -> INTLIT(3)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  18 Col=  17 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  19 Col=   3 Spelling= "r"
Token:Code=265 Name=   ASSIGN Line=  19 Col=   4 Spelling= ":="
#034 variable -> ID(r)
Token:Code=300 Name=   REALIT Line=  19 Col=   6 Spelling= "1.0"
#069 factor -> REALIT(1.0)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  19 Col=   9 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  19 Col=  10 Spelling= "s"
Token:Code=265 Name=   ASSIGN Line=  19 Col=  11 Spelling= ":="
#034 variable -> ID(s)
Token:Code=300 Name=   REALIT Line=  19 Col=  13 Spelling= "2.0"
#069 factor -> REALIT(2.0)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  19 Col=  16 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  19 Col=  17 Spelling= "t"
Token:Code=265 Name=   ASSIGN Line=  19 Col=  18 Spelling= ":="
#034 variable -> ID(t)
Token:Code=300 Name=   REALIT Line=  19 Col=  20 Spelling= "3.0"
#069 factor -> REALIT(3.0)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  19 Col=  23 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  20 Col=   3 Spelling= "i"
Token:Code=265 Name=   ASSIGN Line=  20 Col=   4 Spelling= ":="
#034 variable -> ID(i)
Token:Code=260 Name=       ID Line=  20 Col=   6 Spelling= "j"
Token:Code=263 Name=     STAR Line=  20 Col=   7 Spelling= "*"
#063 factor -> ID(j)
#056 term -> factor
#058 mulop -> *
Token:Code=260 Name=       ID Line=  20 Col=   8 Spelling= "k"
Token:Code=268 Name= SEMICOLON Line=  20 Col=   9 Spelling= ";"
#063 factor -> ID(k)
#057 term -> term mulop factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  21 Col=   3 Spelling= "r"
Token:Code=265 Name=   ASSIGN Line=  21 Col=   4 Spelling= ":="
#034 variable -> ID(r)
Token:Code=260 Name=       ID Line=  21 Col=   6 Spelling= "s"
Token:Code=264 Name=    SLASH Line=  21 Col=   7 Spelling= "/"
#063 factor -> ID(s)
#056 term -> factor
#059 mulop -> /
Token:Code=260 Name=       ID Line=  21 Col=   8 Spelling= "t"
Token:Code=268 Name= SEMICOLON Line=  21 Col=   9 Spelling= ";"
#063 factor -> ID(t)
#057 term -> term mulop factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  22 Col=   3 Spelling= "i"
Token:Code=265 Name=   ASSIGN Line=  22 Col=   4 Spelling= ":="
#034 variable -> ID(i)
Token:Code=260 Name=       ID Line=  22 Col=   6 Spelling= "j"
Token:Code=283 Name=      DIV Line=  22 Col=   8 Spelling= "div"
#063 factor -> ID(j)
#056 term -> factor
#060 mulop -> DIV
Token:Code=260 Name=       ID Line=  22 Col=  12 Spelling= "k"
Token:Code=268 Name= SEMICOLON Line=  22 Col=  13 Spelling= ";"
#063 factor -> ID(k)
#057 term -> term mulop factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  23 Col=   3 Spelling= "i"
Token:Code=265 Name=   ASSIGN Line=  23 Col=   4 Spelling= ":="
#034 variable -> ID(i)
Token:Code=260 Name=       ID Line=  23 Col=   6 Spelling= "j"
Token:Code=288 Name=      MOD Line=  23 Col=   8 Spelling= "mod"
#063 factor -> ID(j)
#056 term -> factor
#061 mulop -> MOD
Token:Code=260 Name=       ID Line=  23 Col=  12 Spelling= "k"
Token:Code=268 Name= SEMICOLON Line=  23 Col=  13 Spelling= ";"
#063 factor -> ID(k)
#057 term -> term mulop factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=260 Name=       ID Line=  24 Col=   3 Spelling= "b"
Token:Code=265 Name=   ASSIGN Line=  24 Col=   4 Spelling= ":="
#034 variable -> ID(b)
Token:Code=260 Name=       ID Line=  24 Col=   6 Spelling= "c"
Token:Code=281 Name=      AND Line=  24 Col=   8 Spelling= "and"
#063 factor -> ID(c)
#056 term -> factor
#062 mulop -> AND
Token:Code=260 Name=       ID Line=  24 Col=  12 Spelling= "d"
Token:Code=259 Name=      END Line=  25 Col=   1 Spelling= "end"
#063 factor -> ID(d)
#057 term -> term mulop factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
Token:Code=266 Name=   PERIOD Line=  25 Col=  14 Spelling= "."
#004 program_body -> compound_statement .
#001 program -> program_head program_declarations program_body

Locality: lexical level 1

  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(11)
  Symbol(Variable Symbol) id(c)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(12)
  Symbol(Variable Symbol) id(d)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(13)
  Symbol(Variable Symbol) id(i)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(j)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(6)
  Symbol(Variable Symbol) id(k)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(7)
  Symbol(Variable Symbol) id(r)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(8)
  Symbol(Variable Symbol) id(s)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(9)
  Symbol(Variable Symbol) id(t)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(10)

Locality: lexical level 1

  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(11)
  Symbol(Variable Symbol) id(c)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(12)
  Symbol(Variable Symbol) id(d)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(13)
  Symbol(Variable Symbol) id(i)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(j)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(6)
  Symbol(Variable Symbol) id(k)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(7)
  Symbol(Variable Symbol) id(r)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(8)
  Symbol(Variable Symbol) id(s)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(9)
  Symbol(Variable Symbol) id(t)
    type(Real)
      size(1) alignment(1)
    lexicallevel(1) address(10)

