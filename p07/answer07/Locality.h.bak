#ifndef Locality_h 
#define Locality_h 1
//-----------------------------------------------------------------------------
//File Locality.h defines the attributes of a Locality for the symbol table 
//-----------------------------------------------------------------------------
//Author: Thomas R. Turner
//E-Mail: trturner@ucok.edu
//January, 2009
//-----------------------------------------------------------------------------
//Copyright January, 2009 by Thomas R. Turner.
//Do not reproduce without permission from Thomas R. Turner.
//-----------------------------------------------------------------------------
//C++ include files and namespace std
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
using namespace std;
//-----------------------------------------------------------------------------
//Application include files
//-----------------------------------------------------------------------------
#include "Typ.h"
#include "Sym.h"
#include "NameSpace.h"
//-----------------------------------------------------------------------------
//A locality is a NameSpace and functions that manage addresses relative to
//the start of the locality.
//-----------------------------------------------------------------------------
class Locality : public NameSpace {
    string identifier;        //Name of the locality
    int offset;               //Next available bit-address
public:
    Locality(string& id);     //Record the identity of the locality and 
                              //initialize the relative address counter
    Locality(char* id);       //Record the identity of the locality and
                              //initialize the relative address counter
    int Offset(void);          //Return the current offset
    int Offset                //Return the starting bit-address for the 
                              //next available variable or field based
                              //on parameters size and alignment
        (int size             //Number of bits required by a variable or
                              //field of type requesting storage
        ,int alignment        //Alignment specification given in bits
                              //for the variable or field of the type
                              //requesting storage
        );
    void Print(ostream& o);   //Print all the symbols in this locality
    void Print                //Print all the symbols in this locality and
        (ostream& o           //title the locality with the lexical level
        ,int ll               //given by parameter ll
        );
    string Id(void);          //Return the name of the locality
};
#endif
