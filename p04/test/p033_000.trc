Token:Code=293 Name=  PROGRAM Line=  12 Col=   1 Spelling= "program"
Token:Code=260 Name=       ID Line=  12 Col=   9 Spelling= "p033_000"
Token:Code=268 Name= SEMICOLON Line=  12 Col=  17 Spelling= ";"
#005 program_parameters -> empty
#002 program_head -> PROGRAM ID(p033_000) program_parameters ;
#010 variable_declarations -> empty
Token:Code=297 Name=      VAR Line=  13 Col=   3 Spelling= "var"
Token:Code=260 Name=       ID Line=  13 Col=   7 Spelling= "count"
#008 identifier_list -> ID(count)
 identifier_list={count}Token:Code=269 Name=    COLON Line=  13 Col=  12 Spelling= ":"
Token:Code=260 Name=       ID Line=  13 Col=  13 Spelling= "integer"
#014 standard_type -> ID(integer)

Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#012 type -> standard_type
Token:Code=268 Name= SEMICOLON Line=  13 Col=  20 Spelling= ";"
#011 variable_declarations -> variable_declarations VAR identifier_list:type;
Token:Code=258 Name=    BEGIN Line=  14 Col=   1 Spelling= "begin"
#015 subprogram_declarations -> empty
#003 program_declarations -> variable_declarations subprogram_declarations
Token:Code=260 Name=       ID Line=  15 Col=   3 Spelling= "count"
Token:Code=265 Name=   ASSIGN Line=  15 Col=   8 Spelling= ":="
#034 variable -> ID(count)
Token:Code=301 Name=   INTLIT Line=  15 Col=  10 Spelling= "10"
#068 factor -> INTLIT(10)
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line=  15 Col=  12 Spelling= ";"
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#027 statement_list -> statement
Token:Code=302 Name=     PLUS Line=  16 Col=   3 Spelling= "while"
Token:Code=260 Name=       ID Line=  16 Col=   9 Spelling= "count"
Token:Code=275 Name=      GEQ Line=  16 Col=  14 Spelling= ">="
#063 factor -> ID(count)
#056 term -> factor
#048 simple_expression -> term
#047 relop -> >=
Token:Code=301 Name=   INTLIT Line=  16 Col=  16 Spelling= "0"
#068 factor -> INTLIT(0)
#056 term -> factor
Token:Code=284 Name=       DO Line=  16 Col=  18 Spelling= "do"
#048 simple_expression -> term
#041 expression -> simple_expression relop simple_expression
Token:Code=258 Name=    BEGIN Line=  17 Col=   3 Spelling= "begin"
Token:Code=260 Name=       ID Line=  18 Col=   5 Spelling= "write"
Token:Code=276 Name=   LPAREN Line=  18 Col=  10 Spelling= "("
Token:Code=260 Name=       ID Line=  18 Col=  11 Spelling= "count"
Token:Code=267 Name=    COMMA Line=  18 Col=  16 Spelling= ","
#063 factor -> ID(count)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
Token:Code=299 Name=   CHRLIT Line=  18 Col=  17 Spelling= ", "
#070 factor -> CHRLIT(, )
#056 term -> factor
Token:Code=277 Name=   RPAREN Line=  18 Col=  19 Spelling= ")"
#048 simple_expression -> term
#040 expression -> simple_expression
#039 expression_list -> expression_list , expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#027 statement_list -> statement
Token:Code=268 Name= SEMICOLON Line=  18 Col=  20 Spelling= ";"
Token:Code=260 Name=       ID Line=  19 Col=   5 Spelling= "count"
Token:Code=265 Name=   ASSIGN Line=  19 Col=  10 Spelling= ":="
#034 variable -> ID(count)
Token:Code=260 Name=       ID Line=  19 Col=  12 Spelling= "count"
Token:Code=262 Name=    MINUS Line=  19 Col=  17 Spelling= "-"
#063 factor -> ID(count)
#056 term -> factor
#048 simple_expression -> term
#054 addop -> -
Token:Code=301 Name=   INTLIT Line=  19 Col=  18 Spelling= "1"
#068 factor -> INTLIT(1)
#056 term -> factor
Token:Code=259 Name=      END Line=  20 Col=   3 Spelling= "end"
#050 simple_expression -> simple_expression addop term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
#031 statement -> compound_statement

#033 statement -> WHILE expression DO statement 
#028 statement_list -> statement_list ; statement
Token:Code=268 Name= SEMICOLON Line=  20 Col=  13 Spelling= ";"
Token:Code=260 Name=       ID Line=  21 Col=   3 Spelling= "writeln"
Token:Code=276 Name=   LPAREN Line=  21 Col=  10 Spelling= "("
Token:Code=299 Name=   CHRLIT Line=  21 Col=  11 Spelling= "Blast off!"
#070 factor -> CHRLIT(Blast off!)
#056 term -> factor
Token:Code=277 Name=   RPAREN Line=  21 Col=  21 Spelling= ")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(writeln) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=259 Name=      END Line=  22 Col=   1 Spelling= "end"
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
Token:Code=266 Name=   PERIOD Line=  22 Col=  14 Spelling= "."
#004 program_body -> compound_statement .
#001 program -> program_head program_declarations program_body

Locality: lexical level 1

  Symbol(Variable Symbol) id(count)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)

Locality: lexical level 1

  Symbol(Variable Symbol) id(count)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)

