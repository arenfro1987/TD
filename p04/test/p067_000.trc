
Token:Code=294 Name=   PROGRAM line= 12 col=  1 Spelling="program"
Token:Code=301 Name=        ID line= 12 col=  9 Spelling="p067_000"
Token:Code=266 Name= SEMICOLON line= 12 col= 17 Spelling=";"
#005 program_parameters -> empty
#002 program_head -> PROGRAM ID(p067_000) program_parameters ;
#010 variable_declarations -> empty
Token:Code=298 Name=       VAR line= 13 col=  3 Spelling="var"
Token:Code=301 Name=        ID line= 13 col=  7 Spelling="a"
#008 identifier_list -> ID(a) identifier_list={a}
Token:Code=265 Name=     COMMA line= 13 col=  8 Spelling=","
Token:Code=301 Name=        ID line= 13 col=  9 Spelling="b"
#009 identifier_list -> identifier_list , ID(b) identifier_list={a,b}
Token:Code=267 Name=     COLON line= 13 col= 10 Spelling=":"
Token:Code=301 Name=        ID line= 13 col= 11 Spelling="boolean"
#014 standard_type -> ID(boolean)
Symbol(Type Symbol) id(boolean)
  type(Boolean)
    size(1) alignment(1)
#012 type -> standard_type
Token:Code=266 Name= SEMICOLON line= 13 col= 18 Spelling=";"
#011 variable_declarations -> variable_declarations VAR identifier_list:type;
Token:Code=282 Name=     BEGIN line= 14 col=  1 Spelling="begin"
#015 subprogram_declarations -> empty
#003 program_declarations -> variable_declarations subprogram_declarations
Token:Code=301 Name=        ID line= 15 col=  3 Spelling="a"
Token:Code=263 Name=    ASSIGN line= 15 col=  4 Spelling=":="
#034 variable -> ID(a)
Token:Code=301 Name=        ID line= 15 col=  6 Spelling="false"
Token:Code=266 Name= SEMICOLON line= 15 col= 11 Spelling=";"
#063 factor -> ID(false)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#027 statement_list -> statement
Token:Code=301 Name=        ID line= 15 col= 12 Spelling="b"
Token:Code=263 Name=    ASSIGN line= 15 col= 13 Spelling=":="
#034 variable -> ID(b)
Token:Code=301 Name=        ID line= 15 col= 15 Spelling="false"
Token:Code=266 Name= SEMICOLON line= 15 col= 20 Spelling=";"
#063 factor -> ID(false)
#056 term -> factor
#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement -> variable := expression
#028 statement_list -> statement_list ; statement
Token:Code=301 Name=        ID line= 16 col=  3 Spelling="write"
Token:Code=274 Name=    LPAREN line= 16 col=  8 Spelling="("
Token:Code=290 Name=       NOT line= 16 col=  9 Spelling="not"
Token:Code=274 Name=    LPAREN line= 16 col= 12 Spelling="("
Token:Code=301 Name=        ID line= 16 col= 13 Spelling="a"
Token:Code=280 Name=       AND line= 16 col= 15 Spelling="and"
#063 factor -> ID(a)
#056 term -> factor
#062 mulop -> AND
Token:Code=301 Name=        ID line= 16 col= 19 Spelling="b"
Token:Code=275 Name=    RPAREN line= 16 col= 20 Spelling=")"
#063 factor -> ID(b)
#057 term -> term mulop factor
#048 simple_expression -> term
#040 expression -> simple_expression
#066 factor -> ( expression )
#067 factor -> NOT factor
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 16 col= 21 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 16 col= 22 Spelling=";"
Token:Code=301 Name=        ID line= 17 col=  3 Spelling="write"
Token:Code=274 Name=    LPAREN line= 17 col=  8 Spelling="("
Token:Code=304 Name=    CHRLIT line= 17 col=  9 Spelling="' = '"
#070 factor -> CHRLIT(' = ')
#056 term -> factor
Token:Code=275 Name=    RPAREN line= 17 col= 14 Spelling=")"
#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 17 col= 15 Spelling=";"
Token:Code=301 Name=        ID line= 18 col=  3 Spelling="write"
Token:Code=274 Name=    LPAREN line= 18 col=  8 Spelling="("
Token:Code=290 Name=       NOT line= 18 col=  9 Spelling="not"
Token:Code=301 Name=        ID line= 18 col= 13 Spelling="a"
Token:Code=292 Name=        OR line= 18 col= 15 Spelling="or"
#063 factor -> ID(a)
#067 factor -> NOT factor
#056 term -> factor
#048 simple_expression -> term
#055 addop -> OR
Token:Code=290 Name=       NOT line= 18 col= 18 Spelling="not"
Token:Code=301 Name=        ID line= 18 col= 22 Spelling="b"
Token:Code=275 Name=    RPAREN line= 18 col= 23 Spelling=")"
#063 factor -> ID(b)
#067 factor -> NOT factor
#056 term -> factor
#050 simple_expression -> simple_expression addop term
#040 expression -> simple_expression
#038 expression_list -> expression
#037 procedure_statement -> ID(write) ( expression_list )
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
Token:Code=266 Name= SEMICOLON line= 18 col= 24 Spelling=";"
Token:Code=301 Name=        ID line= 19 col=  3 Spelling="writeln"
Token:Code=286 Name=       END line= 20 col=  1 Spelling="end"
#036 procedure_statement -> ID(writeln)
#030 statement -> procedure_statement
#028 statement_list -> statement_list ; statement
#026 optional_statements -> statement_list
#024 compound_statement -> BEGIN optional_statement END
Token:Code=264 Name=    PERIOD line= 20 col= 14 Spelling="."
#004 program_body -> compound_statement .
#001 program -> program_head program_declarations program_body
Locality: lexical level 1

  Symbol(Variable Symbol) id(a)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(5)
  Symbol(Variable Symbol) id(b)
    type(Boolean)
      size(1) alignment(1)
    lexicallevel(1) address(6)

Locality: lexical level 0

  Symbol(Standard Function Symbol) id(abs)
    type(Void)
      size(0) alignment(0)
    cspid(abs)
  Symbol(Type Symbol) id(boolean)
    type(Boolean)
      size(1) alignment(1)
  Symbol(Type Symbol) id(char)
    type(Character)
      size(1) alignment(1)
  Symbol(Standard Function Symbol) id(chr)
    type(Void)
      size(0) alignment(0)
    cspid(chr)
  Symbol(Constant Symbol) id(false)
    type(Boolean)
      size(1) alignment(1)
    Constant value(0)
      type(Boolean)
        size(1) alignment(1)
  Symbol(Type Symbol) id(integer)
    type(Integer)
      size(1) alignment(1)
  Symbol(Standard Function Symbol) id(ord)
    type(Void)
      size(0) alignment(0)
    cspid(ord)
  Symbol(Program Symbol) id(p067_000)
    type(Void)
      size(0) alignment(0)
    elabel(L00001) splabel(L00002) eplabel(L00003)
  Symbol(Standard Function Symbol) id(pred)
    type(Void)
      size(0) alignment(0)
    cspid(dec)
  Symbol(Type Symbol) id(real)
    type(Real)
      size(1) alignment(1)
  Symbol(Standard Function Symbol) id(round)
    type(Void)
      size(0) alignment(0)
    cspid(rnd)
  Symbol(Standard Function Symbol) id(sqrt)
    type(Void)
      size(0) alignment(0)
    cspid(sqt)
  Symbol(Standard Function Symbol) id(succ)
    type(Void)
      size(0) alignment(0)
    cspid(inc)
  Symbol(Constant Symbol) id(true)
    type(Boolean)
      size(1) alignment(1)
    Constant value(1)
      type(Boolean)
        size(1) alignment(1)
  Symbol(Standard Function Symbol) id(trunc)
    type(Void)
      size(0) alignment(0)
    cspid(trc)
  Symbol(Standard Procedure Symbol) id(writeboolean)
    type(Void)
      size(0) alignment(0)
    cspid(wrb)
  Symbol(Standard Procedure Symbol) id(writechar)
    type(Void)
      size(0) alignment(0)
    cspid(wrc)
  Symbol(Standard Procedure Symbol) id(writeexponential)
    type(Void)
      size(0) alignment(0)
    cspid(wre)
  Symbol(Standard Procedure Symbol) id(writefixed)
    type(Void)
      size(0) alignment(0)
    cspid(wrf)
  Symbol(Standard Procedure Symbol) id(writeinteger)
    type(Void)
      size(0) alignment(0)
    cspid(wri)
  Symbol(Standard Procedure Symbol) id(writeln)
    type(Void)
      size(0) alignment(0)
    cspid(wln)

