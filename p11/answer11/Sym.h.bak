#ifndef Sym_h
#define Sym_h 1
//-----------------------------------------------------------------------------
//File Sym.h defines the attributes of Symbols for the Subset Pascal
//symbol table
//-----------------------------------------------------------------------------
//Author: Thomas R. Turner
//E-Mail: trturner@uco.edu
//January, 2012
//-----------------------------------------------------------------------------
//Copyright January, 2012 by Thomas R. Turner.
//Do not reproduce without permission from Thomas R. Turner.
//-----------------------------------------------------------------------------
//C++ include files and namespace std
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
using namespace std;
//-----------------------------------------------------------------------------
//Application include files
#include "Typ.h"
#include "Label.h"
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
enum Symkind
    {sk_constant              //Constant symbol
    ,sk_variable              //Variable symbol
    ,sk_type                  //Type symbol
    ,sk_function              //Function symbol
    ,sk_standardfunction      //Standard function symbol
    };
//---------------------------------------------------------------------------
//All Symbols have, at minimum, a symbol classification - symkind -, an 
//identifier, and a type
//---------------------------------------------------------------------------
class Sym {
    Symkind symkind;          //Symbol classification
    string identifier;        //Identifier for the symbol
    Typ* typ;                 //A type descriptor for the symbol
    int lexicallevel;         //All symbols are declared somewhere and,
                              //therefore, must have scope, even standard
                              //symbols in lexicallevel zero.
public:
    //----------------------------------------------------------------------
    //A constructor for the base class Sym
    //----------------------------------------------------------------------
    Sym(Symkind sk,string id,Typ* t,int ll);
    Typ* Type(void);          //Return the pointer to the type descriptor
                              //for this symbol
    //----------------------------------------------------------------------
    //Print this symbol, whatever its classification, and its type 
    //descriptor also, immediately after the symbol descriptor and indented
    //two spaces.
    //----------------------------------------------------------------------
    virtual void Print(ostream& o,int level,char* title);
    int Size(void);           //Return the number of bits needed to store
                              //an entity given by the type descriptor of this
                              //Symbol
    int Alignment(void);      //Return the alignment specification in bits for
                              //an entity given by the type descriptor of this
                              //Symbol
    virtual string Id(void);  //Return the identifier of this symbol descriptor
    int LexicalLevel(void);   //Return the lexical level
    Symkind SymKind(void);    //Return the symbol kind.  
                              //Return true if this Symbol has program type 
    bool IsProgramSymbol(void);
                              //Return true if this Symbol has procedure type
    bool IsProcedureSymbol(void);
                              //Return true if this Symbol has function type
    bool IsFunctionSymbol(void);
                              //Return true if symkind==sk_standardprocedure
    bool IsStandardProcedureSymbol(void);   
                              //Return true if symkind==sk_standardfunction
    bool IsStandardFunctionSymbol(void);   

};
//---------------------------------------------------------------------------
//Define additional attributes for a constant symbol descriptor
//---------------------------------------------------------------------------
class ConstantSymbol: public Sym {
    string value;             //Store the value of the constant symbol as
                              //string
public:
    //----------------------------------------------------------------------
    //A constructor for a constant symbol
    //----------------------------------------------------------------------
    ConstantSymbol(string id,Typ* t,string v, int ll);
    //----------------------------------------------------------------------
    //An overloaded Print for printing constant symbol descriptors
    //----------------------------------------------------------------------
    void Print(ostream& o,int level,char* title);
    //----------------------------------------------------------------------
    //Return the integer value of the constant if it has type cardinal,
    //integer, or character type.
    //----------------------------------------------------------------------
    int IntegerValue(void);
    //----------------------------------------------------------------------
    //Return the string value of the constant.
    //----------------------------------------------------------------------
    string StringValue(void);
};
//---------------------------------------------------------------------------
//Define the attributes of a Variable Symbol
//---------------------------------------------------------------------------
class VariableSymbol: public Sym {
    int address;              //address is the bit-offset from the beginning
                              //of the locality in which this variable is
                              //allocated.
public:
    //----------------------------------------------------------------------
    //A constructor for a Variable Symbol
    //----------------------------------------------------------------------
    VariableSymbol(string id,Typ* t,int a,int ll);
    //----------------------------------------------------------------------
    //An overloaded Print for variable symbols
    //----------------------------------------------------------------------
    void Print(ostream& o,int level,char* title);
    int Address(void);        //Return the bit-address
};
//---------------------------------------------------------------------------
//Define the attributes of a type symbol descriptor
//---------------------------------------------------------------------------
class TypeSymbol: public Sym {
public:
    //----------------------------------------------------------------------
    //A constructor for a type symbol descriptor
    //----------------------------------------------------------------------
    TypeSymbol(string id,Typ* t,int ll);
    //----------------------------------------------------------------------
    //An overloaded Print for type symbols
    //----------------------------------------------------------------------
    void Print(ostream& o,int level,char* title);
};
//---------------------------------------------------------------------------
//Define the attributes of a Function, Procedure, or Program Symbol
//---------------------------------------------------------------------------
class FunctionSymbol: public Sym {
    string entry;             //P-Code label that marks the beginning of
                              //the program 
    string splabel;           //P-Code label that defines the initial value
                              //of register sp
    string eplabel;           //P-Code label that defines the initial value
public:
    //----------------------------------------------------------------------
    //Constructor for FunctionSymbol
    //----------------------------------------------------------------------
    FunctionSymbol
        (string id            //Subprogram identifier
        ,Typ* t               //Subprogram type
        ,int ll               //Subprogram lexical level
        );
    //----------------------------------------------------------------------
    //Function  StoreLabels creates and stores the entry, sp, and ep labels
    //----------------------------------------------------------------------
    void StoreLabels(Label& L);
    //----------------------------------------------------------------------
    //Function StoreEntry stores a label
    //----------------------------------------------------------------------
    void StoreEntry(string e);
    void StoreSPLabel(string spl);
    void StoreEPLabel(string epll);
    //----------------------------------------------------------------------
    //Function Label return the stored label
    //----------------------------------------------------------------------
    string Entry(void);
    string SPLabel(void);
    string EPLabel(void);
    //----------------------------------------------------------------------
    //Function StoreParameters stores the parameters of the function
    //----------------------------------------------------------------------
    void StoreParameters(List<Sym*>* P);
    //----------------------------------------------------------------------
    //An overloaded Print for program symbols
    //----------------------------------------------------------------------
    void Print(ostream& o,int level,char* title);
};
class StandardFunctionSymbol: public Sym {
    string CSPID;             //Standard Procedure or Function Identifier
public:
   StandardFunctionSymbol
       (string id            //Standard procedure 
       ,Typ* t               //Standard procedure or standard function type
       ,string spid          //Call Standard Procedure/Function P-Code Id
       );
   void Print(ostream& o,int level,char* title);
   string SID(void);         //Return the P-Code standard procedure id.
};
#endif
