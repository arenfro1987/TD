Token:Code=294 Name=  PROGRAM Line=  12 Col=   1 Spelling= "program"
Token:Code=260 Name=       ID Line=  12 Col=   9 Spelling= "p034_000"
Token:Code=268 Name= SEMICOLON Line=  12 Col=  17 Spelling= ";"
#005 program_parameters -> Empty
#002 program_head->PROGRAM ID program_parameters
#010 declarations->Empty
Token:Code=298 Name=      VAR Line=  13 Col=   3 Spelling= "var"
Token:Code=260 Name=       ID Line=  13 Col=   7 Spelling= "count"
#008 identifier_list->ID(count)
 identifier_list={count}Token:Code=269 Name=    COLON Line=  13 Col=  12 Spelling= ":"
Token:Code=260 Name=       ID Line=  13 Col=  13 Spelling= "integer"
#014 standard_type -> ID(integer)

Symbol(Type Symbol) id(integer)
  type(Integer)
    size(1) alignment(1)
#012 type->standard_type
Token:Code=268 Name= SEMICOLON Line=  13 Col=  20 Spelling= ";"
#011 declarations->declarations VAR identifier_list: type ;
Token:Code=258 Name=    BEGIN Line=  14 Col=   1 Spelling= "begin"
#015 subprogram_declarations->Empty
#003 program_declarations->declarations subprogram_declarations
Token:Code=260 Name=       ID Line=  15 Col=   3 Spelling= "count"
Token:Code=265 Name=   ASSIGN Line=  15 Col=   8 Spelling= ":="
#034 VARIABLE->ID(count)

Symbol(Variable Symbol) id(count)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         5         
Token:Code=302 Name= INTLIT   Line= 15  Col= 10  Spelling= "10"
#068 factor -> INTLIT(10)

          ldc       i         10        
#056 term -> factor
Token:Code=268 Name= SEMICOLON Line= 15  Col= 12  Spelling= ";"

#048 simple_expression -> term
#040 expression -> simple_expression
#029 statement->variable := expression
#027 statement_list->statement
Token:Code=303 Name= PLUS     Line= 16  Col= 3   Spelling= "while"
Token:Code=260 Name= ID       Line= 16  Col= 9   Spelling= "count"
Token:Code=275 Name= GEQ      Line= 16  Col= 14  Spelling= ">="
#063 factor -> ID(count)

Symbol(Variable Symbol) id(count)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)ll=0
a (address)=5

          lvi       0         5         
#056 term -> factor

#048 simple_expression -> term
#047 relop -> >=
Token:Code=302 Name= INTLIT   Line= 16  Col= 16  Spelling= "0"
#068 factor -> INTLIT(0)

          ldc       i         0         
#056 term -> factor
Token:Code=285 Name= DO       Line= 16  Col= 18  Spelling= "do"

#048 simple_expression -> term
#041 expression -> simple_expression relop simple_expression

          lvi       0         5         

          ldc       i         0         

          geq       i                   
Token:Code=258 Name= BEGIN    Line= 17  Col= 3   Spelling= "begin"
Token:Code=260 Name= ID       Line= 18  Col= 5   Spelling= "writeinteger"
Token:Code=276 Name= LPAREN   Line= 18  Col= 17  Spelling= "("
Token:Code=260 Name= ID       Line= 18  Col= 18  Spelling= "count"
Token:Code=277 Name= RPAREN   Line= 18  Col= 23  Spelling= ")"
#063 factor -> ID(count)

Symbol(Variable Symbol) id(count)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)ll=0
a (address)=5

          lvi       0         5         
#056 term -> factor

#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list->expression
#037 procedure_statement->ID(writeinteger)( expression_list )
id="writeinteger"

          csp                 wri       
#030 statement->procedure_statement
#027 statement_list->statement
Token:Code=268 Name= SEMICOLON Line= 18  Col= 24  Spelling= ";"
Token:Code=260 Name= ID       Line= 19  Col= 5   Spelling= "writechar"
Token:Code=276 Name= LPAREN   Line= 19  Col= 14  Spelling= "("
Token:Code=300 Name= CHRLIT   Line= 19  Col= 15  Spelling= " "
#070 factor -> CHRLIT( )

          ldc       c                   
#056 term -> factor
Token:Code=277 Name= RPAREN   Line= 19  Col= 16  Spelling= ")"

#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list->expression
#037 procedure_statement->ID(writechar)( expression_list )
id="writechar"

          csp                 wrc       
#030 statement->procedure_statement
#028 statement_list->statement_list ; statement
Token:Code=268 Name= SEMICOLON Line= 19  Col= 17  Spelling= ";"
Token:Code=260 Name= ID       Line= 20  Col= 5   Spelling= "count"
Token:Code=265 Name= ASSIGN   Line= 20  Col= 10  Spelling= ":="
#034 VARIABLE->ID(count)

Symbol(Variable Symbol) id(count)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)
          lda       0         5         
Token:Code=260 Name= ID       Line= 20  Col= 12  Spelling= "count"
Token:Code=262 Name= MINUS    Line= 20  Col= 17  Spelling= "-"
#063 factor -> ID(count)

Symbol(Variable Symbol) id(count)
  type(Integer)
    size(1) alignment(1)
  lexicallevel(1) address(5)ll=0
a (address)=5

          lvi       0         5         
#056 term -> factor

#048 simple_expression -> term
#054 addop -> -
Token:Code=302 Name= INTLIT   Line= 20  Col= 18  Spelling= "1"
#068 factor -> INTLIT(1)

          ldc       i         1         
#056 term -> factor
Token:Code=259 Name= END      Line= 21  Col= 3   Spelling= "end"

#050 simple_expression -> simple_expression addop term

          lvi       0         5         

          ldc       i         1         

          sbi                           
#040 expression -> simple_expression
#029 statement->variable := expression
#028 statement_list->statement_list ; statement
#026 optional_statements->statement_list
#024 compound_statement->BEGIN optional_statements END
#031 statement->compound_statement
#033 statement->WHILE expression DO statement
#028 statement_list->statement_list ; statement
Token:Code=268 Name= SEMICOLON Line= 21  Col= 13  Spelling= ";"
Token:Code=260 Name= ID       Line= 22  Col= 3   Spelling= "writestring"
Token:Code=276 Name= LPAREN   Line= 22  Col= 14  Spelling= "("
Token:Code=300 Name= CHRLIT   Line= 22  Col= 15  Spelling= "Blast off!"
#070 factor -> CHRLIT(Blast off!)

          ldc       c         Blast off!
#056 term -> factor
Token:Code=277 Name= RPAREN   Line= 22  Col= 25  Spelling= ")"

#048 simple_expression -> term
#040 expression -> simple_expression
#038 expression_list->expression
#037 procedure_statement->ID(writestring)( expression_list )
id="writestring"

          csp                 wrs       
#030 statement->procedure_statement
#028 statement_list->statement_list ; statement
Token:Code=268 Name= SEMICOLON Line= 22  Col= 26  Spelling= ";"
Token:Code=260 Name= ID       Line= 23  Col= 3   Spelling= "writeln"
Token:Code=259 Name= END      Line= 24  Col= 1   Spelling= "end"
#036 procedure_statement->ID(writeln)
#030 statement->procedure_statement
#028 statement_list->statement_list ; statement
#026 optional_statements->statement_list
#024 compound_statement->BEGIN optional_statements END
Token:Code=266 Name= PERIOD   Line= 24  Col= 14  Spelling= "."
#004 program_body->compound_statement .
#001 Program->program_head program_declarations program_body

Locality: lexical level 1

  Symbol(Variable Symbol) id(count)
    type(Integer)
      size(1) alignment(1)
    lexicallevel(1) address(5)

Locality: lexical level 0

  Symbol(Standard Function Symbol) id(abs)
    type(Void)
      size(0) alignment(0)
    cspid(abs)
  Symbol(Type Symbol) id(boolean)
    type(Boolean)
      size(1) alignment(1)
  Symbol(Type Symbol) id(char)
    type(Character)
      size(1) alignment(1)
  Symbol(Standard Function Symbol) id(chr)
    type(Void)
      size(0) alignment(0)
    cspid(chr)
  Symbol(Constant Symbol) id(false)
    type(Boolean)
      size(1) alignment(1)
    Constant value(0)
      type(Boolean)
        size(1) alignment(1)
  Symbol(Type Symbol) id(integer)
    type(Integer)
      size(1) alignment(1)
  Symbol(Standard Function Symbol) id(ord)
    type(Void)
      size(0) alignment(0)
    cspid(ord)
  Symbol(Program Symbol) id(p034_000)
    type(Void)
      size(0) alignment(0)
    lexicallevel(0) elabel(L00001) splabel(L00002) eplabel(L00003)
  Symbol(Standard Function Symbol) id(pred)
    type(Void)
      size(0) alignment(0)
    cspid(dec)
  Symbol(Standard Procedure Symbol) id(readchar)
    type(Void)
      size(0) alignment(0)
    cspid(rdc)
  Symbol(Standard Procedure Symbol) id(readinteger)
    type(Void)
      size(0) alignment(0)
    cspid(rdi)
  Symbol(Standard Procedure Symbol) id(readln)
    type(Void)
      size(0) alignment(0)
    cspid(rln)
  Symbol(Standard Procedure Symbol) id(readreal)
    type(Void)
      size(0) alignment(0)
    cspid(rdr)
  Symbol(Standard Procedure Symbol) id(readstring)
    type(Void)
      size(0) alignment(0)
    cspid(rds)
  Symbol(Type Symbol) id(real)
    type(Real)
      size(1) alignment(1)
  Symbol(Standard Function Symbol) id(round)
    type(Void)
      size(0) alignment(0)
    cspid(rnd)
  Symbol(Standard Function Symbol) id(sqrt)
    type(Void)
      size(0) alignment(0)
    cspid(sqt)
  Symbol(Standard Function Symbol) id(succ)
    type(Void)
      size(0) alignment(0)
    cspid(inc)
  Symbol(Constant Symbol) id(true)
    type(Boolean)
      size(1) alignment(1)
    Constant value(1)
      type(Boolean)
        size(1) alignment(1)
  Symbol(Standard Function Symbol) id(trunc)
    type(Void)
      size(0) alignment(0)
    cspid(trc)
  Symbol(Standard Procedure Symbol) id(writeboolean)
    type(Void)
      size(0) alignment(0)
    cspid(wrb)
  Symbol(Standard Procedure Symbol) id(writechar)
    type(Void)
      size(0) alignment(0)
    cspid(wrc)
  Symbol(Standard Procedure Symbol) id(writeexponential)
    type(Void)
      size(0) alignment(0)
    cspid(wre)
  Symbol(Standard Procedure Symbol) id(writefixed)
    type(Void)
      size(0) alignment(0)
    cspid(wrf)
  Symbol(Standard Procedure Symbol) id(writeinteger)
    type(Void)
      size(0) alignment(0)
    cspid(wri)
  Symbol(Standard Procedure Symbol) id(writeln)
    type(Void)
      size(0) alignment(0)
    cspid(wln)
  Symbol(Standard Procedure Symbol) id(writestring)
    type(Void)
      size(0) alignment(0)
    cspid(wrs)

